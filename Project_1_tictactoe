#start#
  #display board layout for users understanding#
print('Following image is the board layout')
print('1 '  '| ''2 ' '| ''3' )
print('----------')
print('4 '  '| ''5 ' '| ''6' )
print('----------')
print('7 '  '| ''8 ' '| ''9' )

board = [' ' for x in range(10)]

  #Inserts the letter of the current player (X being player and O being computer) into the chosen spot#
def insertLetter(letter, pos):
  board[pos] = letter

  #Determines wether or not the chosen spot is taken#
def spaceIsFree(pos):
  return board[pos] == ' '
  
  #Will Print the Board out everytime a X or O is placed on the board#
def printBoard(board):
  print(' ' + board[1] + ' | ' + board[2] + ' | ' + board[3])
  print('-----------')
  print(' ' + board[4] + ' | ' + board[5] + ' | ' + board[6])
  print('-----------')
  print(' ' + board[7] + ' | ' + board[8] + ' | ' + board[9])

  #Determines if there is a winner by checking if there are three X's or O's in a row#
def isWinner(bo, le):
  return ((bo[7] == le and bo[8] == le and bo[9] == le) or 
      (bo[4] == le and bo[5] == le and bo[6] == le) or 
      (bo[1] == le and bo[2] == le and bo[3] == le) or 
      (bo[1] == le and bo[4] == le and bo[7] == le) or  
      (bo[2] == le and bo[5] == le and bo[8] == le) or 
      (bo[3] == le and bo[6] == le and bo[9] == le) or 
      (bo[1] == le and bo[5] == le and bo[9] == le) or  
      (bo[3] == le and bo[5] == le and bo[7] == le))

  #Prompts the user to input their choice of where to place their mark and checks if it is a valid spot#
  #if the number is too large, too small, or not an intiger the game will prompt for a valid input#
  #if the spot if already occupied it will prompt the user to chose a different space#
def playMove():
  run = True
  while run:
    move = input("Please select a position to place an 'X' (1-9): ")
    try:
      move = int(move)
      if move > 0 and move < 10:
        if spaceIsFree(move):
          run = False
          insertLetter('x', move)
        else:
          print('Sorry this space is occupied')
      else:
        print('Please type the number within the range')
    except:
      print('Please type a number. ')

  #this is the "Ai" function of the computer because it makes it a lot more fun if the computer actually knows how to play the game rather than completely--#
  #--guessing a spot to place a marker#
def compMove():
    #checks for empty spots to play in#
  possibleMoves = [x for x, letter in enumerate(board) if letter == ' ' and x != 0]
  move = 0
    #checks if it has a possible current winning move if it dose it places its marker there#
    #if it doesn't have a possible winning move then it checks if the player has a possible winning move and blocks that spot by placing its marker there#
  for let in ['o','x']:
    for i in possibleMoves:
      boardCopy = board[:]
      boardCopy[i] = let
      if isWinner(boardCopy, let):
        move = i
        return move

    #checking to see if there are any open corners because we all know that corners are the best spot to play in tictactoe#
  cornersOpen = []
  for i in possibleMoves:
    if i in [1,3,7,9]:
      cornersOpen.append(i)
  if len(cornersOpen) > 0:
    move = selectRandom(cornersOpen)
    return move
  if 5 in possibleMoves:
    move = 5 
    return move 
  edgesOpen = []
  for i in possibleMoves:
    if i in [2,4,6,8]:
      edgesOpen.append(i)
  if len(edgesOpen) > 0:
    move = selectRandom(edgesOpen)
  return move

  #this choses a somewhat random spot to place the marker making it so that the computer is not predictable#
        #li is the list of open spots on the bord#
def selectRandom(li):
  import random
  ln = len(li)
  r = random.randrange(0, ln)
  return li[r]

  #Determines wether or not the full#
def isBoardFull(board):
  if board.count(' ') > 1:
    return False
  else:
    return True

  #this is where all of the parts come together to make the game happen in the order that it needs to run#
def main():
  print('Welcome tic tac toe')
    #prints out the board#
  printBoard(board)
    #lets the game run so long as the board is not full#
  while not(isBoardFull(board)):
      #checking if the computer won#
    if not(isWinner(board, 'o')):
      playMove()
      printBoard(board)
    else:
      print("Sorry, O's won this time! ")
      break
      #checking if computer can make a move
    if not(isWinner(board, 'x')):
      move  = compMove()
      if move == 0:
        print('Tie game')
      else:
        insertLetter('o', move)
        print("Computer placed an 'o' in position", move, ':')
        printBoard(board)
      #checking if the player won the game#
    else:
      print("X's won this time! Good job")
      break
    #if board is full the tie game#
  if isBoardFull(board):
    print('Tie game')

main()
